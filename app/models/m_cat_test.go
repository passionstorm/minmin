// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMCats(t *testing.T) {
	t.Parallel()

	query := MCats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMCatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MCats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MCatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MCatExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MCat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MCatExists to return true, but got false.")
	}
}

func testMCatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mCatFound, err := FindMCat(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mCatFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMCatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MCats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMCatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MCats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMCatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mCatOne := &MCat{}
	mCatTwo := &MCat{}
	if err = randomize.Struct(seed, mCatOne, mCatDBTypes, false, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}
	if err = randomize.Struct(seed, mCatTwo, mCatDBTypes, false, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mCatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mCatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MCats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMCatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mCatOne := &MCat{}
	mCatTwo := &MCat{}
	if err = randomize.Struct(seed, mCatOne, mCatDBTypes, false, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}
	if err = randomize.Struct(seed, mCatTwo, mCatDBTypes, false, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mCatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mCatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mCatBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func mCatAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MCat) error {
	*o = MCat{}
	return nil
}

func testMCatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MCat{}
	o := &MCat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mCatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MCat object: %s", err)
	}

	AddMCatHook(boil.BeforeInsertHook, mCatBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mCatBeforeInsertHooks = []MCatHook{}

	AddMCatHook(boil.AfterInsertHook, mCatAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mCatAfterInsertHooks = []MCatHook{}

	AddMCatHook(boil.AfterSelectHook, mCatAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mCatAfterSelectHooks = []MCatHook{}

	AddMCatHook(boil.BeforeUpdateHook, mCatBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mCatBeforeUpdateHooks = []MCatHook{}

	AddMCatHook(boil.AfterUpdateHook, mCatAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mCatAfterUpdateHooks = []MCatHook{}

	AddMCatHook(boil.BeforeDeleteHook, mCatBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mCatBeforeDeleteHooks = []MCatHook{}

	AddMCatHook(boil.AfterDeleteHook, mCatAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mCatAfterDeleteHooks = []MCatHook{}

	AddMCatHook(boil.BeforeUpsertHook, mCatBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mCatBeforeUpsertHooks = []MCatHook{}

	AddMCatHook(boil.AfterUpsertHook, mCatAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mCatAfterUpsertHooks = []MCatHook{}
}

func testMCatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMCatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mCatColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMCatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMCatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MCatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMCatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MCats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mCatDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Code`: `varchar`, `CatID`: `varchar`, `Type`: `tinyint`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedFLG`: `tinyint`}
	_           = bytes.MinRead
)

func testMCatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mCatPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mCatAllColumns) == len(mCatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMCatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mCatAllColumns) == len(mCatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MCat{}
	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mCatDBTypes, true, mCatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mCatAllColumns, mCatPrimaryKeyColumns) {
		fields = mCatAllColumns
	} else {
		fields = strmangle.SetComplement(
			mCatAllColumns,
			mCatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MCatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMCatsUpsert(t *testing.T) {
	t.Parallel()

	if len(mCatAllColumns) == len(mCatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMCatUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MCat{}
	if err = randomize.Struct(seed, &o, mCatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MCat: %s", err)
	}

	count, err := MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mCatDBTypes, false, mCatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MCat: %s", err)
	}

	count, err = MCats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
